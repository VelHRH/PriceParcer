import axios from "axios";
import { resolveUrl } from "@/utils";
import { links } from "@/utils/data";
import { IFilter } from "@/types";
import ProtectedPage from "@/components/protectedPage";
import { checkToken } from "@/utils/checkToken";
import { useEffect, useState } from "react";
import Head from "next/head";
import LoginForm from "@/components/loginForm";

export const getStaticProps = async () => {
 let res = [];
 for (let link of links) {
  if (link.link === "") {
   res.push({
    link: link.link,
    title: link.name,
    website: link.website,
    price: "",
    normalPrice: link.normalPrice,
    lastScraped: new Date().toISOString(),
   });
  } else {
   let { price, lastScraped } = await resolveUrl(link.link);
   if (price.includes("€")) {
    const response = await axios.get(
     "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json&valcode=EUR"
    );
    const exchangeRate = response.data[0].rate;

    price =
     (
      parseFloat(
       price
        .replace(/\s/g, "")
        .slice(
         price.replace(/\s/g, "").indexOf("цена") + 5,
         price.replace(/\s/g, "").indexOf("€") - 3
        )
      ) * exchangeRate
     ).toString() + "€";
   }
   res.push({
    link: link.link,
    title: link.name,
    website: link.website,
    price,
    normalPrice: link.normalPrice,
    lastScraped,
   });
  }
 }

 return {
  props: {
   res,
  },
  revalidate: 3600,
 };
};

export default function Home(props: { res: IFilter[] }) {
 const [isAuthenticated, setIsAuthenticated] = useState(false);
 useEffect(() => {
  setIsAuthenticated(checkToken());
 }, []);
 if (!isAuthenticated) {
  return <LoginForm />;
 }
 return (
  <>
   <Head>
    <title>{isAuthenticated ? "Prices" : "Login"}</title>
    <meta name="description" content="Generated by create next app" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" href="/favicon.ico" />
   </Head>
   {!isAuthenticated ? <LoginForm /> : <ProtectedPage res={props.res} />}
  </>
 );
}
